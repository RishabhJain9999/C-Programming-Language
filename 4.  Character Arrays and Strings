QUESTIONS

1.  Length of the character array!
2.  Reverse a character array!
3. Convert from lowercase to uppercase!
4. Convert from uppercase to lowercase!
5. Replace @ with space
    input - My@name@is@Rishabh@Jain
    output - My name is Rishabh Jain
6. Check Palindrome

#include <iostream>
using namespace std;

int main() {

  //Creating a character array
  char ch[10];

  //Taking input
  cin>>ch;

  //Agar specifically first index pr input lena h
  cin>>ch[1];

  //Agar specifically 3rd index pr input lena h
  cin>>ch[3];

  //printing  hte character array
  cout<<ch;

  //Taking full line input
  //ch --> array where we want to take the input.
  //100 --> maximum size of the input that we can take.
  cin.getline(ch,100);

  //Jab bhi hum character array meh input lete h toh last meh null character autmatically aa jaata ha that denotes the termination of string.

  //ASCII value of null character is 0.

  //Koi question agar string se TLE maar raha h then try it with character array. Character arrays are more efficient than strings.

  Q-1 PRINT THE LENGTH OF CHARACTER ARRAY
  //Loop ke through saare characters traverse karunga and jab null character '\0' aayga tab ruk jaunga.

  //METHOD - 1
    #include <iostream>
using namespace std;

int findLength(char ch[], int size){

  int length = 0;

  for(int i=0;i<size;i++){
    if(ch[i] == '\0'){
      break;
    } else{
      length++;
    }
  }
  return length;
}

int main() {

  char ch[100];
  cin.getline(ch,100);

  int len = findLength(ch,100);

  cout<<"Length of character array is "<<len<<endl;

  return 0;
}


  //METHOD - 2
  #include <iostream>
#include<string.h>
using namespace std;

int main() {

  char ch[100];
  cin.getline(ch,100);

  //In-built function for finding the length of character array --> "strlen"
  cout<<"Length of character array is "<<strlen(ch)<<endl;

  return 0;
}

###############################################################################################################################

Q-2 REVERSE A CHARACTER ARRAY

//METHOD - 1
#include<iostream>
#include<string.h>

using namespace std;

void findReverse(char ch[], int size){

  int start = 0;
  int end = size-1;

  while(start<end){
    swap(ch[start],ch[end]);
    start++;
    end--;
  }
}

//character array(like integer array) by default "by reference" pass ho rahe hote h isliye hume array return krne ki zarorat nhi padi.

int main(){

  char ch[100];
  //cin>>ch;
  cin.getline(ch,100);

  //ISME YEH LINE YAAD RAKHO IMPORTANT H. It is used to calculate the size of the array.
  int len = strlen(ch);

  findReverse(ch,len);

  cout<<"Reversed array is "<<ch<<endl;

}


//METHOD - 2
// #include<iostream>
// #include<algorithm>  //for reverse
// #include<string.h>  //for strlen

#include<bits/stdc++.h>

using namespace std;

int main(){

  char ch[100];
  //cin>>ch;
  cin.getline(ch,100);

  int len = strlen(ch);

  //In-buit function for reverse the character array --> "reverse"
  reverse(ch,ch+len);

  cout<<"Reversed array is "<<ch<<endl;

}

############################################################################################################################################

Q-3 CNVERT FROM LOWERCASE TO UPPERCASE

#include<iostream>
using namespace std;

void lowercaseToUppercase(char ch[], int size){

  int index = 0;

  while(ch[index] != '\0'){
    if(ch[index]>='a' && ch[index]<='z'){
      ch[index] = ch[index] - 'a' + 'A';
    }
    index++;
  }

}

int main(){

  char ch[100];
  cin.get(ch,100);

  cout<<"Before conversion --> "<<ch<<endl;
  lowercaseToUppercase(ch,100);
  cout<<"After conversion --> "<<ch<<endl;

}

#########################################################################################################################################################3

4.  Uppercase to lowercase

#include<iostream>
using namespace std;

void uppercaseToLowercase(char ch[], int size){

  int index = 0;

  while(ch[index] != '\0'){
    if(ch[index]>='A' && ch[index]<='Z'){
      ch[index] = ch[index] - 'A' + 'a';
    }
    index++;
  }

}

int main(){

  char ch[100];
  cin.get(ch,100);

  cout<<"Before conversion --> "<<ch<<endl;
  uppercaseToLowercase(ch,100);
  cout<<"After conversion --> "<<ch<<endl;

}

####################################################################################################################################################################

5. Replace @ with space

#include<iostream>
using namespace std;

void replaceCharacter(char ch[], int size){

  int index = 0;

  while(ch[index] != '\0'){
    if(ch[index] == '@'){
     //insert space
      ch[index] = ' ';
    }
    index++;
  }
  
}

int main(){

  char ch[100];
  cin.getline(ch,100);

  cout<<"Before replacing --> "<<ch<<endl;

  replaceCharacter(ch,100);

  cout<<"After replacing --> "<<ch<<endl;

}

########################################################################################################################################################

6. Check whether it is a valid palindrome or not

#include<bits/stdc++.h>
using namespace std;

void chechPalindrome(char ch[], int len){

  //len - length of the string/character array
  int start = 0;
  int end = len-1;

  while(start<end){
    if(ch[start]==ch[end]){
      start++;
      end--;
    } else{
      cout<<"Not a valid palindrome"<<endl;
      return;
    } 
  }
  cout<<"A valid palindrome"<<endl;
  
}

int main(){

  char ch[100];
  cin.getline(ch,100);

  int len = strlen(ch);

  //agar isme len ki jagah 100 pass krte toh end 99th index pr aata and not at the end of actual
  //character array toh error aata. Isliye len pass karenge.
  chechPalindrome(ch,len);

}








  
  return 0;
}



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                            STRINGS

#include<iostream>
using namespace std;

int main(){

  //creation
  string name;

  //empty string
  string temp ="";

  //input
  cin>>name;

  //Taking full line inputs
  //name --> variable name jiske andar input le rahe h
  getline(cin,name);

  //print
  cout<<"Printing name "<<name<<endl;

  //printing first character
  cout<<"First character "<<name[0]<<endl;

  //Loop(Printing using loop)
  int index = 0;
  while(name[index] != '\0'){
    cout<<"index --> "<<index<<" char--> "<<name[index]<<endl;
    index++;

  }

  //character array meh hum "cin.getline()" ka use krte h whereas strings meh hum "getline()" ka use krte h

  //character arrays ki tarah strings ke last meh bhi null character '\0' hota h.



UTILITY FUNCTIONS IN A STRING

stringname.length() --> tells us the number of characters in a string.

stringname.empty() --> tells us whether a string is empty or not. 
            if string is empty --> 1 
            if string is not empty --> 0

stringname.at(indexnumber) --> tells us string ke particular index pr konsi value h.
     ex - stringname.at(2);

stringname.front() --> tells us the first character of the string.

stringname.back() --> tells us the last character of the string.

append() --> used for combining 2 strings.
Ex - string str1 = "Rishabh";
     string str2 = "Jain";

     str1.append(str2);  //str2 ko str1 meh add krdo
     cout<<str1<<endl;

output -- RishabhJain

stringname.erase() --> udes to erase a part of the string.

Ex - string description = "This is a car";
     //4th index se 3 characters erase krdo.
     description.erase(4,3);
     cout<<description<<endl;

output -- This a car

stringname.insert() --> used to insert one string between another string.

Ex - string name = "Love Babbar";
     string middle = " Kumar";

     //name wali string meh 5th index pr middle wali string ko insert krdo
     name.insert(5,middle);
     cout<<name<<endl;

output -- Love Kumar Babbar

stringname.push_back(' ') --> Adds the corresponding character at the end of the string.

Ex - string name = "love";
     name.pushback('R');
     cout<<name<<endl;

output - loveR

stringname.pop_back() --> removes the last character from the end.

Ex - string name = "love";
     name.pop_back();
     cout<<name<<endl;

output - lov







  



  return 0;
}
