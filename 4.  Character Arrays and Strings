QUESTIONS

1.  Length of the character array!
2.  Reverse a character array!
3. Convert from lowercase to uppercase!
4. Convert from uppercase to lowercase!
5. Replace @ with space
    input - My@name@is@Rishabh@Jain
    output - My name is Rishabh Jain
6. Check Palindrome

#include <iostream>
using namespace std;

int main() {

  //Creating a character array
  char ch[10];

  //Taking input
  cin>>ch;

  //Agar specifically first index pr input lena h
  cin>>ch[1];

  //Agar specifically 3rd index pr input lena h
  cin>>ch[3];

  //printing  hte character array
  cout<<ch;

  //Taking full line input
  //ch --> array where we want to take the input.
  //100 --> maximum size of the input that we can take.
  cin.getline(ch,100);

  //Jab bhi hum character array meh input lete h toh last meh null character autmatically aa jaata ha that denotes the termination of string.

  //ASCII value of null character is 0.

  //Koi question agar string se TLE maar raha h then try it with character array. Character arrays are more efficient than strings.

  Q-1 PRINT THE LENGTH OF CHARACTER ARRAY
  //Loop ke through saare characters traverse karunga and jab null character '\0' aayga tab ruk jaunga.

  //METHOD - 1
    #include <iostream>
using namespace std;

int findLength(char ch[], int size){

  int length = 0;

  for(int i=0;i<size;i++){
    if(ch[i] == '\0'){
      break;
    } else{
      length++;
    }
  }
  return length;
}

int main() {

  char ch[100];
  cin.getline(ch,100);

  int len = findLength(ch,100);

  cout<<"Length of character array is "<<len<<endl;

  return 0;
}


  //METHOD - 2
  #include <iostream>
#include<string.h>
using namespace std;

int main() {

  char ch[100];
  cin.getline(ch,100);

  //In-built function for finding the length of character array --> "strlen"
  cout<<"Length of character array is "<<strlen(ch)<<endl;

  return 0;
}

###############################################################################################################################

Q-2 REVERSE A CHARACTER ARRAY

//METHOD - 1
#include<iostream>
#include<string.h>

using namespace std;

void findReverse(char ch[], int size){

  int start = 0;
  int end = size-1;

  while(start<end){
    swap(ch[start],ch[end]);
    start++;
    end--;
  }
}

//character array(like integer array) by default "by reference" pass ho rahe hote h isliye hume array return krne ki zarorat nhi padi.

int main(){

  char ch[100];
  //cin>>ch;
  cin.getline(ch,100);

  //ISME YEH LINE YAAD RAKHO IMPORTANT H. It is used to calculate the size of the array.
  int len = strlen(ch);

  findReverse(ch,len);

  cout<<"Reversed array is "<<ch<<endl;

}


//METHOD - 2
// #include<iostream>
// #include<algorithm>  //for reverse
// #include<string.h>  //for strlen

#include<bits/stdc++.h>

using namespace std;

int main(){

  char ch[100];
  //cin>>ch;
  cin.getline(ch,100);

  int len = strlen(ch);

  //In-buit function for reverse the character array --> "reverse"
  reverse(ch,ch+len);

  cout<<"Reversed array is "<<ch<<endl;

}

############################################################################################################################################

Q-3 CNVERT FROM LOWERCASE TO UPPERCASE

#include<iostream>
using namespace std;

void lowercaseToUppercase(char ch[], int size){

  int index = 0;

  while(ch[index] != '\0'){
    if(ch[index]>='a' && ch[index]<='z'){
      ch[index] = ch[index] - 'a' + 'A';
    }
    index++;
  }

}

int main(){

  char ch[100];
  cin.get(ch,100);

  cout<<"Before conversion --> "<<ch<<endl;
  lowercaseToUppercase(ch,100);
  cout<<"After conversion --> "<<ch<<endl;

}

#########################################################################################################################################################3

4.  Uppercase to lowercase

#include<iostream>
using namespace std;

void uppercaseToLowercase(char ch[], int size){

  int index = 0;

  while(ch[index] != '\0'){
    if(ch[index]>='A' && ch[index]<='Z'){
      ch[index] = ch[index] - 'A' + 'a';
    }
    index++;
  }

}

int main(){

  char ch[100];
  cin.get(ch,100);

  cout<<"Before conversion --> "<<ch<<endl;
  uppercaseToLowercase(ch,100);
  cout<<"After conversion --> "<<ch<<endl;

}

####################################################################################################################################################################

5. Replace @ with space

#include<iostream>
using namespace std;

void replaceCharacter(char ch[], int size){

  int index = 0;

  while(ch[index] != '\0'){
    if(ch[index] == '@'){
     //insert space
      ch[index] = ' ';
    }
    index++;
  }
  
}

int main(){

  char ch[100];
  cin.getline(ch,100);

  cout<<"Before replacing --> "<<ch<<endl;

  replaceCharacter(ch,100);

  cout<<"After replacing --> "<<ch<<endl;

}

########################################################################################################################################################

6. Check whether it is a valid palindrome or not

#include<bits/stdc++.h>
using namespace std;

void chechPalindrome(char ch[], int len){

  //len - length of the string/character array
  int start = 0;
  int end = len-1;

  while(start<end){
    if(ch[start]==ch[end]){
      start++;
      end--;
    } else{
      cout<<"Not a valid palindrome"<<endl;
      return;
    } 
  }
  cout<<"A valid palindrome"<<endl;
  
}

int main(){

  char ch[100];
  cin.getline(ch,100);

  int len = strlen(ch);

  //agar isme len ki jagah 100 pass krte toh end 99th index pr aata and not at the end of actual
  //character array toh error aata. Isliye len pass karenge.
  chechPalindrome(ch,len);

}








  
  return 0;
}



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                            STRINGS

QUESTIONS

1. (LEETCODE - 1047) Remove all adjacent duplicates in string
2. (Leetcode - 1910) Remove all occurrences of a substring
3. (Leetcode - 680) Valid Palindrom-2
4. (Leetcode - 647) Palindromic Substrings



####################################################################################################################

#include<iostream>
using namespace std;

int main(){

  //creation
  string name;

  //empty string
  string temp ="";

  //input
  cin>>name;

  //Taking full line inputs
  //name --> variable name jiske andar input le rahe h
  getline(cin,name);

  //print
  cout<<"Printing name "<<name<<endl;

  //printing first character
  cout<<"First character "<<name[0]<<endl;

  //Loop(Printing using loop)
  int index = 0;
  while(name[index] != '\0'){
    cout<<"index --> "<<index<<" char--> "<<name[index]<<endl;
    index++;

  }

  //character array meh hum "cin.getline()" ka use krte h whereas strings meh hum "getline()" ka use krte h

  //character arrays ki tarah strings ke last meh bhi null character '\0' hota h.



UTILITY FUNCTIONS IN A STRING

stringname.length() --> tells us the number of characters in a string.

stringname.empty() --> tells us whether a string is empty or not. 
            if string is empty --> 1 
            if string is not empty --> 0

stringname.at(indexnumber) --> tells us string ke particular index pr konsi value h.
     ex - stringname.at(2);

stringname.front() --> tells us the first character of the string.

stringname.back() --> tells us the last character of the string.

append() --> used for combining 2 strings.
Ex - string str1 = "Rishabh";
     string str2 = "Jain";

     str1.append(str2);  //str2 ko str1 meh add krdo
     cout<<str1<<endl;

output -- RishabhJain

stringname.erase() --> udes to erase a part of the string.

Ex - string description = "This is a car";
     //4th index se 3 characters erase krdo.
     description.erase(4,3);
     cout<<description<<endl;

output -- This a car

stringname.insert() --> used to insert one string between another string.

Ex - string name = "Love Babbar";
     string middle = " Kumar";

     //name wali string meh 5th index pr middle wali string ko insert krdo
     name.insert(5,middle);
     cout<<name<<endl;

output -- Love Kumar Babbar

stringname.push_back(' ') --> Adds the corresponding character at the end of the string.

Ex - string name = "love";
     name.pushback('R');
     cout<<name<<endl;

output - loveR

stringname.pop_back() --> removes the last character from the end.

Ex - string name = "love";
     name.pop_back();
     cout<<name<<endl;

output - lov

.find() --> used to find one string within another string.

EX-
string str1 = "yaar tera superstar desi kalakaar";
string str2 = "star";

//The code checks if the substring str2 is present in the string str1 and prints "Found" if it is, otherwise it prints "Not Found".
//npos -- no position found
if(str1.find(str2) == string :: npos){
//not found
cout<<"Not Found"<<endl;
} else {
cout<<"Found"<<endl;
}

output -- found


.compare() --> used to compare two strings whether they are equal or not. Agar dono ko compare krne ke baad 0(zero) aa jaye toh matlab strings equal h, wrna nhi h.

Ex - 
string str1 = "Hello";
string str2 = "Hello";

if(str1.compare(str2) == 0){
  cout<<"Matching"<<endl;
} else {
  cout<<"Not matching"<<endl;
}

output -- Matching


substr( , ) --> used to extract a particular part of a string.

Ex-
//8 index se 2 length ka word extract kr lo.
string description = "My name is Rishabh Jain";
cout<<description.substr(8,2)<<endl;

output - is


1. (Leetcode - 1047) Romove all adjacent duplicates in string

//We will create a new string(ans) jo initially empty hogi. Hum abse pehle first character ko new string meh add kr deenge. Uske baad hum check karenge ki jo original string ka 2nd
//character ha vo agarnew string(ans) ke rightmost character ke equal ha toh ans(string) meh add kr deenge and agar equal nhi h toh ans(string) se pop kr deenge.
class Solution {
public:
    string removeDuplicates(string s) {

        string ans = "";
        int index = 0;

        while(index<s.length()){
            //ans string ka rightmost character and string s ka current character agar same ha
            //ans.length()>0 -yeh humne isliye likha h kyoki agar answer string ki length 0 hue toh, then we would be checking for '-1' index which is an invalid index.
            if(ans.length()>0 && ans[ans.length()-1] == s[index]){
                //pop from ans string
                ans.pop_back();
            } else {
                //push into ans string
                ans.push_back(s[index]);
            }
            index++;
        }
       return ans;

    }
};

##############################################################################################################################

2. (Leetcode - 1910) Remove all occurrences of a substring
class Solution {
public:
    string removeOccurrences(string s, string part) {

        while(s.find(part) != string::npos){
            //if inside loop, it means that part exists in a string
            s.erase(s.find(part),part.length());
        }

        return s;
        
    }
};

################################################################################################################################

3. (Leetcode - 680) Valid Palindrom-2

class Solution {
public:

    bool checkPalindrome(string s, int i, int j){
        while(i<j){
            if(s[i] != s[j]){
                return false;
            } else {
                i++;
                j--;
            }
        }
        return true;
    }


    bool validPalindrome(string s) {
        int i = 0;
        int j = s.length()-1;

        while(i<j){
            if(s[i] == s[j]){
                i++;
                j--;
            } else {
                //s[i] != s[j]
                //one removal allowed
                //check palindrome for remaining string after removal

                //ith character remove
                bool ans1 = checkPalindrome(s,i+1,j);

                //jth character remove
                bool ans2 = checkPalindrome(s,i,j-1);

                return ans1 || ans2;
            }     
        }

        return true;
        
    }
};

##############################################################################################################################

4. (Leetcode - 647) Palindromic Substrings

class Solution {
public:

    int expand(string s, int i, int j){
        int count = 0;

        while((i>=0 && j<s.length())  && s[i] == s[j]){
            count++;
            i--;
            j++;
        }
        return count;
    }
   
    int countSubstrings(string s) {
        int totalCount = 0;

        for(int center=0;center<s.length();center++){

            //odd ka ans 
            //isme center ki jagah i and j bhi le skte h.
            //int j=i;
            int odd = expand(s, center, center);

            //even ka ans
            //int j = i+1;
            int even = expand(s, center, center+1);

            //V.V.V.IMP - Using "totalCount = odd + even;" only keeps the counts from the current iteration, resetting totalCount 
            //each time. This results in the final count being the number of palindromic substrings found in the last iteration only, 
            // which is incorrect.
            totalCount = totalCount + odd + even;
        }

        return totalCount;
    }
};







  



  return 0;
}
